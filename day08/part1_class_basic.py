# part1_class_basic.py
# 클래스(class)
# 클래스란 같은 속성과 기능을 가진 여러 대상들을 만들기 위한
# 양식, 형식, 템플릿 역할을 하는 구조적 단위를 가리킨다.
# 이러한 클래스를 기반으로 하여 구체적인 대상을 생성할 수 있으며
# 그렇게 생성된 객체를 인스턴스라고 부른다.

# 클래스 만들기
# class 클래스이름():
#   # 클래스 정보

# 클래스 이름은 반드시 첫글자를 대문자로 적어주어야 한다.
# 이를 파스칼 표기법이라고 부른다.
class Student():
  # 클래스 이름 뒤의 소괄호는 내용이 없으면 생략이 가능하다.
  # 클래스 정보, 변수를 작성해주어야 한다.
  # 클래스의 정보를 정의하는 특수한 메서드를 사용해야 한다.
  # __init__() 메서드를 사용하여 기본 정보를 입력받을 수 있다.
  def __init__(self, name: str) -> None: # 매개변수를 활용하여
    # 객체의 정보를 초기세팅할 수 있다.
    # self.name = '홍길동'
    self.name = name
    # self 예약어는 클래스에 의해서 만들어진 객체를
    # 공통적으로 가리키는 대명사 역할을 한다.
    self.age = 30
    # __init__ 특수 메서드는 되돌려줄 값이 정해져 있기 때문에
    # 절대로 return으로 값을 반환해선 안 된다.
    # return 뒤를 비워서 메서드 종료를 하는 건 괜찮다.

# 실행부
if __name__ == "__main__":
  # 클래스를 기반으로 객체, 인스턴스를 생성하려면
  # 클래스이름() 를 이용하여 객체화를 진행해야 한다.
  # 이러한 객체, 대상은 변수에 담아서 접근할 수 있다.
  hong = Student("둘리")

  # 객체의 정보나 기능에 접근하려면 하위접근연산자인
  # 마침표.를 인스턴스 뒤에 붙여서 접근할 수 있다.
  print(hong.name) # hong 객체의 name 속성에 접근, 출력
  # 이러한 하위접근연산자를 읽을 때는 '~의'라고 읽으면 된다.

  # 객체 정보에의 접근과 변경
  hong.name = "개명한 홍길동"
  print(hong.name) # 개명한 홍길동




