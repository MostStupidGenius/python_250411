# part1_class_2.py
# 클래스란 같은 구조, 기능을 공유하는 여러 객체를 만들고자 할 때
# 그 설계도를 만들기 위해 작성하는 구조체를 가리킨다.
# 객체는 클래스에서 정한 변수와 기능을 모두 보유한 채
# 실체화되어 객체가 만들어진다.
# 각각의 객체는 같은 변수명을 가지되 각 변수는 소속이 다르기 때문에
# 서로 별개의 변수로 취급된다.
class Person:
    def __init__(self, name): # 외부에서 name값을 전달받을 거다.
        self.name = name

if __name__ == "__main__":
    hong = Person("홍길동") # name 값이 "홍길동"인 객체 생성
    kim = Person("김옥균") # name값이 "김옥균"인 객체 생성
    print(hong.name) # 객체 hong의 name값을 출력해라
    print(kim.name) # 객체 kim의 name값을 출력해라
    # 둘 다 name이라는 변수를 가지지만, 소속이 다르기 때문에
    # 서로 다른 저장공간을 보유하게 된다.
    # 각 객체는 독립적인 저장공간을 가지게 된다.
    # 다만 그 변수명이나 기능은 원본 클래스의 구조를 따라간다.
    
    # 두 객체를 하나의 리스트에 담아서 동일한 동작을
    # 수행할 수 있게 된다.(같은 구조를 공유하기 때문에)
    people = [hong, kim]
    # 리스트 안에는 Person이라는 타입의 값만 들어가있다.
    # 즉, 클래스를 객체화한 대상들은 해당 클래스타입의
    # 값으로 취급된다.
    for person in people:
        print(f"info: {person.name}") # people에 담긴 각 객체의 이름을
        # 순서대로 출력